C51 COMPILER V6.11.3B,  MAIN                      03/02/111  13:57:40  PAGE  1

QCW(0x00002D1A)

WIN32 C51 COMPILER V6.11.3B, COMPILATION OF MODULE MAIN      
OBJECT MODULE PLACED IN f:\p\sdas_tester\sdastt_v1.0 04-11-10\main.obj
COMPILER INVOKED BY: C51.EXE F:\P\SDAS_TESTER\SDASTT_V1.0 04-11-10\MAIN.C OBJECT
            -(F:\P\SDAS_TESTER\SDASTT_V1.0 04-11-10\MAIN.OBJ) PIN(C:\FSI\INC) NO
            -AM PR(F:\P\SDAS_TESTER\SDASTT_V1.0 04-11-10\MAIN.LST) CD SB OE(1) S
            -M FP(NOFLOAT) PW(80) 

stmt level    source
   1          #include "sdas.h"
   2          
   3          /*
   4          	Modification:	Alignment of Pulse Out with That of 1PPS
   5          						Setting @@Hb as first Command, by Reseting Command=0 in 1PPS
            - interrupt
   6          						
   7          		24-01-2011:			GMT Offset Added
   8          */
   9          void main(void)
  10          {
  11   1        	unsigned int dly;
  12   1        	CMOD = 0x00;
  13   1      	CH = 0x00;
  14   1      	CL = 0x00;
  15   1      	CCAP0H = 0x00;
  16   1      	CCAP0L = 0x00;
  17   1      	CCAPM0 = 0x21;	// Positive Edge Capture (pps)
  18   1      	CCAPM1 = 0x31;	// Positive/Negative Edge Capture (switch)
  19   1      
  20   1         SCON = 0x52;
  21   1      	TMOD = 0x21;
  22   1      	TH1  = -6;
  23   1      	TR1  = 1;
  24   1      	//ES = 1;
  25   1      	//EC = 1;
  26   1      	//EA = 1;
  27   1      
  28   1      	BKLT   = 1;
  29   1      	pps = 0;
  30   1      	pulse_out = 0;
  31   1      	
  32   1      	state = idle;
  33   1      	
  34   1      	InitDisp(); 
  35   1         LCDClear();	
  36   1         LCDCursor(2,4);
  37   1      	DispStr("Plz wait..");
  38   1      
  39   1       	// Delay required for GPS Reciever
  40   1       	// Increased to 2 sec; because of initialization in cold start
  41   1        	for(dly=0;dly<2000;dly++)
  42   1      	 DelayOnems();
  43   1       
  44   1         SendStr(Short_Position);
  45   1         while(Getc()!=10);
  46   1      	Putc('.');
  47   1      	SendStr(ASCII_Position);   
  48   1      	while(Getc()!=10);
  49   1      	Putc('.');
  50   1      	SendStr(Combined_Position);   
  51   1      	while(Getc()!=10);
  52   1      	Putc('.');
  53   1      			
  54   1      	ES = 1;
  55   1      	EC = 1;
  56   1      	EA = 1;
  57   1      	button = SW;
  58   1      	RxState = get_first_hdr;
  59   1      
  60   1      	while(1)
  61   1      	{
  62   2      	   if(rxFlag)
  63   2        		{
  64   3         		rxFlag = 0;
  65   3      	     	switch (RxState)
  66   3      			{
  67   4      				case get_first_hdr:
  68   4      					if(Temp == '@')
  69   4      						RxState = get_second_hdr;
  70   4      	         	break;
  71   4      				case get_second_hdr:
  72   4      					if(Temp == '@')
  73   4      					{
  74   5      						RxState = check_first_chr;
  75   5      						RxCntr = 0;
  76   5      					}
  77   4      					else
  78   4      						RxState = get_first_hdr;
  79   4      					break;
  80   4      				case check_first_chr:
  81   4      					if(Temp=='E')
  82   4      						RxState   = check_second_chrq;	
  83   4      					else if(Temp=='H')
  84   4      						RxState   = check_second_chrb;	
  85   4      					break;
  86   4      				case check_second_chrq:
  87   4      					if(Temp=='q')
  88   4      						RxState   = get_time_info;
  89   4      					break;
  90   4      				case check_second_chrb:
  91   4      					if(Temp=='b')
  92   4      						RxState   = get_track_info;
  93   4      					break;
  94   4      				case get_time_info:
  95   4      					if(RxCntr<12 && Temp!=',')
  96   4      						gps_time[RxCntr++] = Temp;
  97   4      					else if(RxCntr==12) 
  98   4      					{
  99   5      				 		commands++;
 100   5      				 		RxState = get_first_hdr;
 101   5      				 		if (commands==2) state = check_button;
 102   5      					}
 103   4      					break;
 104   4      				case get_track_info:
 105   4            	   	RxCntr++;
 106   4      					if(RxCntr == 36)
 107   4               			vis_satelites = Temp;
 108   4      	  				if(RxCntr == 37)
 109   4        					{
 110   5            	   		track_satelites = Temp;
 111   5      						commands++;
 112   5      						if (commands==2) state = check_button;
 113   5      						RxState = get_first_hdr;
 114   5      
 115   5      	         	}
 116   4      					break;
 117   4        				}// End Switch
 118   3      			}//if rxFlag
 119   2      		switch(state)
 120   2      		{
 121   3      	 	case idle:
 122   3      	 		break;
 123   3      	 	case sw_interrupt:
 124   3      	 		DelayOnems();
 125   3      	 		DelayOnems();
 126   3      			if(SW)
 127   3      				button = 1;
 128   3      			else
 129   3      				button = 0;
 130   3      			state = idle;
 131   3      			break;
 132   3      	 	case check_button:
 133   3      	 		TimeWindow();
 134   3      	 		if(button)
 135   3      	 			state = One_hour_pulse;
 136   3      	 		else
 137   3      	 			state = Two_min_pulse;
 138   3      	 		break;
 139   3      	 	case One_hour_pulse:
 140   3      			if((gps_time[8]==0x33) && (gps_time[9]==0x30) && (gps_time[10]=
            -=0x32) && (gps_time[11]==0x39)) 
 141   3      				A2 =1;
 142   3      			else 
 143   3      				A2 = 0;
 144   3      			state = idle;
 145   3      	 		break;
 146   3      	 	case Two_min_pulse:
 147   3      			if(((gps_time[9]%2)==0) && (gps_time[10]==0x32) && (gps_time[11
            -]==0x39)) 
 148   3           			A2 =1;
 149   3      			else 
 150   3           			A2 = 0;
 151   3      	 		state = idle;
 152   3      	 		break;
 153   3      	 	case generate_pps:
 154   3      	 		pps = 1;
 155   3       			pps = 1;
 156   3      			pps = 0;
 157   3      	   	state = idle;
 158   3      			break;
 159   3      	 	case generate_pulse:
 160   3      	 		pulse_out = 1;
 161   3       			pulse_out = 1;
 162   3      	 		pulse_out = 0;
 163   3      	 		state = idle;
 164   3      	 		break;
 165   3      		}//switch			
 166   2      	}//while
 167   1      }//main
 168          void serial_isr(void) interrupt 4
 169          {	
 170   1      	if(RI)
 171   1      	{
 172   2       	 	rxFlag = 1;
 173   2      	 	RI = 0;
 174   2      		Temp = SBUF;
 175   2      	}
 176   1      }
 177          void PCATimers() interrupt 6 using 1
 178          {
 179   1      	if(CCF0)	// +ve edge of 1pps
 180   1      	{
 181   2      		CCF0 = 0;
 182   2      		commands = 0;
 183   2      		pulse_out = A2;
 184   2      		pulse_out = A2;
 185   2       		pulse_out = 0;
 186   2      		state = generate_pps;
 187   2      
 188   2      	}//CCF0
 189   1      	if(CCF1)
 190   1      	{
 191   2      		CCF1 = 0;
 192   2      		state = sw_interrupt;
 193   2      	}//CCF1
 194   1      }
 195          
 196          
 197          
 198          
 199          
 200          
 201          
 202          
 203          
 204          
 205          
 206          
 207          
 208          
 209          
 210          
 211          
 212          
 213          
 214          
 215          
 216          
 217          
 218          
 219          
 220          
 221          
 222          
 223          
 224          
 225          
 226          
 227          
 228          
 229          
 230          
 231          
 232          
 233          
 234          
 235          
 236          
 237          
C51 COMPILER V6.11.3B,  MAIN                      03/02/111  13:57:40  PAGE  2

ASSEMBLY LISTING OF GENERATED OBJECT CODE

            ; FUNCTION LcdBusy (BEGIN)
                                           ; SOURCE LINE # 52 
0000 D287           SETB   BS
                                           ; SOURCE LINE # 53 
0002 D2A5           SETB   ELCD
                                           ; SOURCE LINE # 54 
0004 C2A7           CLR    RS
                                           ; SOURCE LINE # 55 
0006 D2A6           SETB   RW
0008         ?WHILE1:
                                           ; SOURCE LINE # 56 
0008 308706         JNB    BS,?NXT1
                                           ; SOURCE LINE # 58 
000B C2A5           CLR    ELCD
                                           ; SOURCE LINE # 59 
000D D2A5           SETB   ELCD
000F 80F7           SJMP   ?WHILE1
0011         ?NXT1:
0011 22             RET    

            ; FUNCTION LcdBusy (END)

            ; FUNCTION _WriteControl (BEGIN)
              ; Register R7 is assigned to parameter var
                                           ; SOURCE LINE # 64 
0000 8F80           MOV    P0,R7
                                           ; SOURCE LINE # 65 
0002 C2A7           CLR    RS
                                           ; SOURCE LINE # 66 
0004 C2A6           CLR    RW
                                           ; SOURCE LINE # 67 
0006 D2A5           SETB   ELCD
                                           ; SOURCE LINE # 68 
0008 C2A5           CLR    ELCD
                                           ; SOURCE LINE # 69 
000A 120000  R      LCALL  LcdBusy
000D 22             RET    

            ; FUNCTION _WriteControl (END)

            ; FUNCTION _WriteData (BEGIN)
              ; Register R7 is assigned to parameter var
                                           ; SOURCE LINE # 73 
0000 8F80           MOV    P0,R7
                                           ; SOURCE LINE # 74 
0002 D2A7           SETB   RS
                                           ; SOURCE LINE # 75 
0004 C2A6           CLR    RW
                                           ; SOURCE LINE # 76 
0006 D2A5           SETB   ELCD
                                           ; SOURCE LINE # 77 
0008 C2A5           CLR    ELCD
                                           ; SOURCE LINE # 78 
000A 120000  R      LCALL  LcdBusy
000D 22             RET    

            ; FUNCTION _WriteData (END)

            ; FUNCTION InitDisp (BEGIN)
                                           ; SOURCE LINE # 83 
0000 7F38           MOV    R7,#038H
0002 120000  R      LCALL  _WriteControl
                                           ; SOURCE LINE # 84 
0005 7F38           MOV    R7,#038H
0007 120000  R      LCALL  _WriteControl
                                           ; SOURCE LINE # 85 
000A 7F38           MOV    R7,#038H
000C 120000  R      LCALL  _WriteControl
                                           ; SOURCE LINE # 86 
000F 7F06           MOV    R7,#006H
0011 120000  R      LCALL  _WriteControl
                                           ; SOURCE LINE # 87 
0014 7F0C           MOV    R7,#00CH
0016 120000  R      LCALL  _WriteControl
0019 22             RET    

            ; FUNCTION InitDisp (END)

            ; FUNCTION _DispStr (BEGIN)
              ; Register R0R4R5 is assigned to parameter s
                                           ; SOURCE LINE # 93 
0000 EB             MOV    A,R3
0001 FD             MOV    R5,A
0002 EA             MOV    A,R2
0003 FC             MOV    R4,A
0004 E9             MOV    A,R1
0005 F8             MOV    R0,A
0006         ?WHILE3:
                                           ; SOURCE LINE # 92 
0006 ED             MOV    A,R5
0007 FB             MOV    R3,A
0008 EC             MOV    A,R4
0009 FA             MOV    R2,A
000A E8             MOV    A,R0
000B F9             MOV    R1,A
000C 120000  R      LCALL  IPGN1?C
000F 6015           JZ     ?NXT3
                                           ; SOURCE LINE # 93 
0011 ED             MOV    A,R5
0012 FB             MOV    R3,A
0013 EC             MOV    A,R4
0014 FA             MOV    R2,A
0015 E8             MOV    A,R0
0016 F9             MOV    R1,A
0017 08             INC    R0
0018 E8             MOV    A,R0
0019 7002           JNZ    ?LAB10
001B 0C             INC    R4
001C EC             MOV    A,R4
001D         ?LAB10:
001D 120000  R      LCALL  IPGN1?C
0020 FF             MOV    R7,A
0021 120000  R      LCALL  _WriteData
0024 80E0           SJMP   ?WHILE3
0026         ?NXT3:
0026 22             RET    

            ; FUNCTION _DispStr (END)

            ; FUNCTION _LCDCursor (BEGIN)
              ; Register R6 is assigned to parameter row
                                           ; SOURCE LINE # 103 
0000 8F06           MOV    AR6,R7
              ; Register R5 is assigned to parameter col
                                           ; SOURCE LINE # 97 
0002 EE             MOV    A,R6
0003 14             DEC    A
0004 600A           JZ     ?CASE4
0006 14             DEC    A
0007 600F           JZ     ?CASE5
0009 14             DEC    A
000A 6014           JZ     ?CASE6
000C 14             DEC    A
000D 6019           JZ     ?CASE7
000F 22             RET    
0010         ?CASE4:
                                           ; SOURCE LINE # 99 
0010 ED             MOV    A,R5
0011 247F           ADD    A,#07FH
0013 FF             MOV    R7,A
0014 120000  R      LCALL  _WriteControl
0017 22             RET    
0018         ?CASE5:
                                           ; SOURCE LINE # 100 
0018 ED             MOV    A,R5
0019 24BF           ADD    A,#0BFH
001B FF             MOV    R7,A
001C 120000  R      LCALL  _WriteControl
001F 22             RET    
0020         ?CASE6:
                                           ; SOURCE LINE # 101 
0020 ED             MOV    A,R5
0021 2493           ADD    A,#093H
0023 FF             MOV    R7,A
0024 120000  R      LCALL  _WriteControl
0027 22             RET    
0028         ?CASE7:
                                           ; SOURCE LINE # 102 
0028 ED             MOV    A,R5
0029 24D3           ADD    A,#0D3H
002B FF             MOV    R7,A
002C 120000  R      LCALL  _WriteControl
                                           ; SOURCE LINE # 103 
002F 22             RET    

            ; FUNCTION _LCDCursor (END)

            ; FUNCTION Delay500us (BEGIN)
                                           ; SOURCE LINE # 108 
0000 758AF7         MOV    TL0,#0F7H
                                           ; SOURCE LINE # 109 
0003 758CFF         MOV    TH0,#0FFH
                                           ; SOURCE LINE # 110 
0006 D28C           SETB   TR0
0008         ?WHILE5:
                                           ; SOURCE LINE # 111 
0008 308DFD         JNB    TF0,?WHILE5
                                           ; SOURCE LINE # 112 
000B C28C           CLR    TR0
                                           ; SOURCE LINE # 113 
000D C28D           CLR    TF0
000F 22             RET    

            ; FUNCTION Delay500us (END)

            ; FUNCTION DelayOnems (BEGIN)
                                           ; SOURCE LINE # 118 
0000 758ACD         MOV    TL0,#0CDH
                                           ; SOURCE LINE # 119 
0003 758CF8         MOV    TH0,#0F8H
                                           ; SOURCE LINE # 120 
0006 D28C           SETB   TR0
0008         ?WHILE7:
                                           ; SOURCE LINE # 121 
0008 308DFD         JNB    TF0,?WHILE7
                                           ; SOURCE LINE # 122 
000B C28C           CLR    TR0
                                           ; SOURCE LINE # 123 
000D C28D           CLR    TF0
000F 22             RET    

            ; FUNCTION DelayOnems (END)

            ; FUNCTION LCDClear (BEGIN)
                                           ; SOURCE LINE # 127 
0000 7F01           MOV    R7,#001H
0002 120000  R      LCALL  _WriteControl
                                           ; SOURCE LINE # 128 
0005 120000  R      LCALL  DelayOnems
                                           ; SOURCE LINE # 129 
0008 120000  R      LCALL  DelayOnems
000B 22             RET    

            ; FUNCTION LCDClear (END)

            ; FUNCTION Getc (BEGIN)
0000         ?WHILE9:
                                           ; SOURCE LINE # 134 
0000 3098FD         JNB    RI,?WHILE9
              ; R6 is assigned to c
0003 AE99           MOV    R6,SBUF
0005 8E07           MOV    AR7,R6
0007 C298           CLR    RI
                                           ; SOURCE LINE # 135 
0009 22             RET    

            ; FUNCTION Getc (END)

            ; FUNCTION _SendChar (BEGIN)
              ; Register R7 is assigned to parameter ch
                                           ; SOURCE LINE # 139 
0000 D299           SETB   TI
0002         ?WHILE12:
                                           ; SOURCE LINE # 140 
0002 3099FD         JNB    TI,?WHILE12
0005 C299           CLR    TI
0007 8F99           MOV    SBUF,R7
0009         ?WHILE13:
                                           ; SOURCE LINE # 141 
0009 3099FD         JNB    TI,?WHILE13
000C C299           CLR    TI
000E 22             RET    

            ; FUNCTION _SendChar (END)

            ; FUNCTION _SendStr (BEGIN)
              ; Register R0R4R5 is assigned to parameter cmd
                                           ; SOURCE LINE # 151 
0000 EB             MOV    A,R3
0001 FD             MOV    R5,A
0002 EA             MOV    A,R2
0003 FC             MOV    R4,A
0004 E9             MOV    A,R1
0005 F8             MOV    R0,A
                                           ; SOURCE LINE # 145 
0006 D299           SETB   TI
0008         ?WHILE17:
                                           ; SOURCE LINE # 146 
0008 ED             MOV    A,R5
0009 FB             MOV    R3,A
000A EC             MOV    A,R4
000B FA             MOV    R2,A
000C E8             MOV    A,R0
000D F9             MOV    R1,A
000E 120000  R      LCALL  IPGN1?C
0011 6017           JZ     ?WHILE19
0013         ?WHILE18:
                                           ; SOURCE LINE # 148 
0013 3099FD         JNB    TI,?WHILE18
0016 C299           CLR    TI
0018 ED             MOV    A,R5
0019 FB             MOV    R3,A
001A EC             MOV    A,R4
001B FA             MOV    R2,A
001C E8             MOV    A,R0
001D F9             MOV    R1,A
001E 120000  R      LCALL  IPGN1?C
0021 F599           MOV    SBUF,A
                                           ; SOURCE LINE # 149 
0023 08             INC    R0
0024 E8             MOV    A,R0
0025 70E1           JNZ    ?WHILE17
0027 0C             INC    R4
0028 80DE           SJMP   ?WHILE17
002A         ?WHILE19:
                                           ; SOURCE LINE # 151 
002A 3099FD         JNB    TI,?WHILE19
002D C299           CLR    TI
002F 22             RET    

            ; FUNCTION _SendStr (END)

            ; FUNCTION TimeWindow (BEGIN)
                                           ; SOURCE LINE # 155 
0000 7F01           MOV    R7,#001H
0002 7D01           MOV    R5,#001H
0004 120000  R      LCALL  _LCDCursor
                                           ; SOURCE LINE # 156 
0007 7B05           MOV    R3,#005H
0009 7A00    R      MOV    R2,#000H
000B 7900    R      MOV    R1,#000H
000D 120000  R      LCALL  _DispStr
                                           ; SOURCE LINE # 158 
0010 7F02           MOV    R7,#002H
0012 7D03           MOV    R5,#003H
0014 120000  R      LCALL  _LCDCursor
                                           ; SOURCE LINE # 159 
0017 7B05           MOV    R3,#005H
0019 7A00    R      MOV    R2,#000H
001B 7900    R      MOV    R1,#000H
001D 120000  R      LCALL  _DispStr
                                           ; SOURCE LINE # 160 
0020 75F00A         MOV    B,#00AH
0023 E500    R      MOV    A,vis_satelites
0025 84             DIV    AB
0026 2430           ADD    A,#030H
0028 FF             MOV    R7,A
0029 120000  R      LCALL  _WriteData
                                           ; SOURCE LINE # 161 
002C 75F00A         MOV    B,#00AH
002F E500    R      MOV    A,vis_satelites
0031 84             DIV    AB
0032 E5F0           MOV    A,B
0034 2430           ADD    A,#030H
0036 FF             MOV    R7,A
0037 120000  R      LCALL  _WriteData
                                           ; SOURCE LINE # 163 
003A 7B05           MOV    R3,#005H
003C 7A00    R      MOV    R2,#000H
003E 7900    R      MOV    R1,#000H
0040 120000  R      LCALL  _DispStr
                                           ; SOURCE LINE # 164 
0043 75F00A         MOV    B,#00AH
0046 E500    R      MOV    A,track_satelites
0048 84             DIV    AB
0049 2430           ADD    A,#030H
004B FF             MOV    R7,A
004C 120000  R      LCALL  _WriteData
004F 75F00A         MOV    B,#00AH
0052 E500    R      MOV    A,track_satelites
0054 84             DIV    AB
0055 E5F0           MOV    A,B
0057 2430           ADD    A,#030H
0059 FF             MOV    R7,A
005A 120000  R      LCALL  _WriteData
                                           ; SOURCE LINE # 165 
005D 7F03           MOV    R7,#003H
005F 7D02           MOV    R5,#002H
0061 120000  R      LCALL  _LCDCursor
                                           ; SOURCE LINE # 166 
0064 7B05           MOV    R3,#005H
0066 7A00    R      MOV    R2,#000H
0068 7900    R      MOV    R1,#000H
006A 120000  R      LCALL  _DispStr
                                           ; SOURCE LINE # 167 
006D 7900    R      MOV    R1,#gps_time+02H
006F 8707           MOV    AR7,@R1
0071 120000  R      LCALL  _WriteData
0074 7900    R      MOV    R1,#gps_time+03H
0076 8707           MOV    AR7,@R1
0078 120000  R      LCALL  _WriteData
007B 7F2D           MOV    R7,#02DH
007D 120000  R      LCALL  _WriteData
                                           ; SOURCE LINE # 168 
0080 7900    R      MOV    R1,#gps_time
0082 8707           MOV    AR7,@R1
0084 120000  R      LCALL  _WriteData
                                           ; SOURCE LINE # 169 
0087 7900    R      MOV    R1,#gps_time+01H
0089 8707           MOV    AR7,@R1
008B 120000  R      LCALL  _WriteData
008E 7F2D           MOV    R7,#02DH
0090 120000  R      LCALL  _WriteData
                                           ; SOURCE LINE # 170 
0093 7F32           MOV    R7,#032H
0095 120000  R      LCALL  _WriteData
0098 7F30           MOV    R7,#030H
009A 120000  R      LCALL  _WriteData
                                           ; SOURCE LINE # 171 
009D 7900    R      MOV    R1,#gps_time+04H
009F 8707           MOV    AR7,@R1
00A1 120000  R      LCALL  _WriteData
00A4 7900    R      MOV    R1,#gps_time+05H
00A6 8707           MOV    AR7,@R1
00A8 120000  R      LCALL  _WriteData
                                           ; SOURCE LINE # 172 
00AB 7F04           MOV    R7,#004H
00AD 7D04           MOV    R5,#004H
00AF 120000  R      LCALL  _LCDCursor
                                           ; SOURCE LINE # 173 
00B2 7B05           MOV    R3,#005H
00B4 7A00    R      MOV    R2,#000H
00B6 7900    R      MOV    R1,#000H
00B8 120000  R      LCALL  _DispStr
                                           ; SOURCE LINE # 174 
00BB 7900    R      MOV    R1,#gps_time+06H
00BD 8707           MOV    AR7,@R1
00BF 120000  R      LCALL  _WriteData
00C2 7900    R      MOV    R1,#gps_time+07H
00C4 8707           MOV    AR7,@R1
00C6 120000  R      LCALL  _WriteData
00C9 7F3A           MOV    R7,#03AH
00CB 120000  R      LCALL  _WriteData
                                           ; SOURCE LINE # 175 
00CE 7900    R      MOV    R1,#gps_time+08H
00D0 8707           MOV    AR7,@R1
00D2 120000  R      LCALL  _WriteData
00D5 7900    R      MOV    R1,#gps_time+09H
00D7 8707           MOV    AR7,@R1
00D9 120000  R      LCALL  _WriteData
00DC 7F3A           MOV    R7,#03AH
00DE 120000  R      LCALL  _WriteData
                                           ; SOURCE LINE # 176 
00E1 7900    R      MOV    R1,#gps_time+0AH
00E3 8707           MOV    AR7,@R1
00E5 120000  R      LCALL  _WriteData
00E8 7900    R      MOV    R1,#gps_time+0BH
00EA 8707           MOV    AR7,@R1
00EC 120000  R      LCALL  _WriteData
00EF 22             RET    

            ; FUNCTION TimeWindow (END)

            ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 12 
0000 75D900         MOV    CMOD,#000H
                                           ; SOURCE LINE # 13 
0003 75F900         MOV    CH,#000H
                                           ; SOURCE LINE # 14 
0006 75E900         MOV    CL,#000H
                                           ; SOURCE LINE # 15 
0009 75FA00         MOV    CCAP0H,#000H
                                           ; SOURCE LINE # 16 
000C 75EA00         MOV    CCAP0L,#000H
                                           ; SOURCE LINE # 17 
000F 75DA21         MOV    CCAPM0,#021H
                                           ; SOURCE LINE # 18 
0012 75DB31         MOV    CCAPM1,#031H
                                           ; SOURCE LINE # 20 
0015 759852         MOV    SCON,#052H
                                           ; SOURCE LINE # 21 
0018 758921         MOV    TMOD,#021H
                                           ; SOURCE LINE # 22 
001B 758DFA         MOV    TH1,#0FAH
                                           ; SOURCE LINE # 23 
001E D28E           SETB   TR1
                                           ; SOURCE LINE # 28 
0020 D2A4           SETB   BKLT
                                           ; SOURCE LINE # 29 
0022 C291           CLR    pps
                                           ; SOURCE LINE # 30 
0024 C290           CLR    pulse_out
                                           ; SOURCE LINE # 32 
0026 750012  R      MOV    state,#012H
                                           ; SOURCE LINE # 34 
0029 120000  R      LCALL  InitDisp
                                           ; SOURCE LINE # 35 
002C 120000  R      LCALL  LCDClear
                                           ; SOURCE LINE # 36 
002F 7F02           MOV    R7,#002H
0031 7D04           MOV    R5,#004H
0033 120000  R      LCALL  _LCDCursor
                                           ; SOURCE LINE # 37 
0036 7B05           MOV    R3,#005H
0038 7A00    R      MOV    R2,#000H
003A 7900    R      MOV    R1,#000H
003C 120000  R      LCALL  _DispStr
              ; R4R5 is assigned to dly
                                           ; SOURCE LINE # 41 
003F E4             CLR    A
0040 FC             MOV    R4,A
0041 FD             MOV    R5,A
0042         ?FOR1:
                                           ; SOURCE LINE # 42 
0042 120000  R      LCALL  DelayOnems
                                           ; SOURCE LINE # 41 
0045 0D             INC    R5
0046 ED             MOV    A,R5
0047 7001           JNZ    ?LAB51
0049 0C             INC    R4
004A         ?LAB51:
004A BC07F5         CJNE   R4,#007H,?FOR1
004D BDD0F2         CJNE   R5,#0D0H,?FOR1
                                           ; SOURCE LINE # 44 
0050 7900    R      MOV    R1,#Short_Position
0052 E4             CLR    A
0053 FA             MOV    R2,A
0054 7B01           MOV    R3,#001H
0056 120000  R      LCALL  _SendStr
0059         ?WHILE24:
                                           ; SOURCE LINE # 45 
0059 120000  R      LCALL  Getc
005C BF0AFA         CJNE   R7,#00AH,?WHILE24
                                           ; SOURCE LINE # 46 
005F 7F2E           MOV    R7,#02EH
0061 120000  R      LCALL  _WriteData
                                           ; SOURCE LINE # 47 
0064 7900    R      MOV    R1,#ASCII_Position
0066 E4             CLR    A
0067 FA             MOV    R2,A
0068 7B01           MOV    R3,#001H
006A 120000  R      LCALL  _SendStr
006D         ?WHILE25:
                                           ; SOURCE LINE # 48 
006D 120000  R      LCALL  Getc
0070 BF0AFA         CJNE   R7,#00AH,?WHILE25
                                           ; SOURCE LINE # 49 
0073 7F2E           MOV    R7,#02EH
0075 120000  R      LCALL  _WriteData
                                           ; SOURCE LINE # 50 
0078 7900    R      MOV    R1,#Combined_Position
007A E4             CLR    A
007B FA             MOV    R2,A
007C 7B01           MOV    R3,#001H
007E 120000  R      LCALL  _SendStr
0081         ?WHILE26:
                                           ; SOURCE LINE # 51 
0081 120000  R      LCALL  Getc
0084 BF0AFA         CJNE   R7,#00AH,?WHILE26
                                           ; SOURCE LINE # 52 
0087 7F2E           MOV    R7,#02EH
0089 120000  R      LCALL  _WriteData
                                           ; SOURCE LINE # 54 
008C D2AC           SETB   ES
                                           ; SOURCE LINE # 55 
008E D2AE           SETB   EC
                                           ; SOURCE LINE # 56 
0090 D2AF           SETB   EA
                                           ; SOURCE LINE # 57 
0092 A294           MOV    C,SW
0094 9200    R      MOV    button,C
                                           ; SOURCE LINE # 58 
0096 750001  R      MOV    RxState,#001H
0099         ?WHILE27:
                                           ; SOURCE LINE # 62 
0099 E500    R      MOV    A,rxFlag
009B 7003           JNZ    $ + 5
009D 020000  R      LJMP   ?NXT53
                                           ; SOURCE LINE # 64 
00A0 E4             CLR    A
00A1 F500    R      MOV    rxFlag,A
                                           ; SOURCE LINE # 65 
00A3 E500    R      MOV    A,RxState
00A5 B40402         CJNE   A,#004H,?LAB54
00A8 8055           SJMP   ?CASE25
00AA         ?LAB54:
00AA 500E           JNC    ?LAB53
00AC E500    R      MOV    A,RxState
00AE 14             DEC    A
00AF 6018           JZ     ?CASE22
00B1 14             DEC    A
00B2 6025           JZ     ?CASE23
00B4 14             DEC    A
00B5 6034           JZ     ?CASE24
00B7 020000  R      LJMP   ?NXT54
00BA         ?LAB53:
00BA E500    R      MOV    A,RxState
00BC 24FB           ADD    A,#0FBH
00BE 6049           JZ     ?CASE26
00C0 14             DEC    A
00C1 6050           JZ     ?CASE27
00C3 14             DEC    A
00C4 6079           JZ     ?CASE28
00C6 020000  R      LJMP   ?NXT53
00C9         ?CASE22:
                                           ; SOURCE LINE # 68 
00C9 E500    R      MOV    A,Temp
00CB B44002         CJNE   A,#040H,$ + 5
00CE 8003           SJMP   $ + 5
00D0 020000  R      LJMP   ?NXT54
                                           ; SOURCE LINE # 69 
00D3 750002  R      MOV    RxState,#002H
                                           ; SOURCE LINE # 70 
00D6 020000  R      LJMP   ?NXT53
00D9         ?CASE23:
                                           ; SOURCE LINE # 72 
00D9 E500    R      MOV    A,Temp
00DB B44008         CJNE   A,#040H,?ELSE19
                                           ; SOURCE LINE # 74 
00DE 750003  R      MOV    RxState,#003H
                                           ; SOURCE LINE # 75 
00E1 E4             CLR    A
00E2 F500    R      MOV    RxCntr,A
00E4 8078           SJMP   ?NXT54
00E6         ?ELSE19:
                                           ; SOURCE LINE # 78 
00E6 750001  R      MOV    RxState,#001H
                                           ; SOURCE LINE # 79 
00E9 8073           SJMP   ?NXT53
00EB         ?CASE24:
                                           ; SOURCE LINE # 81 
00EB E500    R      MOV    A,Temp
00ED B44505         CJNE   A,#045H,?ELSE20
                                           ; SOURCE LINE # 82 
00F0 750004  R      MOV    RxState,#004H
00F3 8069           SJMP   ?NXT54
00F5         ?ELSE20:
                                           ; SOURCE LINE # 83 
00F5 E500    R      MOV    A,Temp
00F7 B44864         CJNE   A,#048H,?NXT54
                                           ; SOURCE LINE # 84 
00FA 750005  R      MOV    RxState,#005H
                                           ; SOURCE LINE # 85 
00FD 805F           SJMP   ?NXT53
00FF         ?CASE25:
                                           ; SOURCE LINE # 87 
00FF E500    R      MOV    A,Temp
0101 B4715A         CJNE   A,#071H,?NXT54
                                           ; SOURCE LINE # 88 
0104 750006  R      MOV    RxState,#006H
                                           ; SOURCE LINE # 89 
0107 8055           SJMP   ?NXT53
0109         ?CASE26:
                                           ; SOURCE LINE # 91 
0109 E500    R      MOV    A,Temp
010B B46250         CJNE   A,#062H,?NXT54
                                           ; SOURCE LINE # 92 
010E 750007  R      MOV    RxState,#007H
                                           ; SOURCE LINE # 93 
0111 804B           SJMP   ?NXT53
0113         ?CASE27:
                                           ; SOURCE LINE # 95 
0113 E500    R      MOV    A,RxCntr
0115 B40C00         CJNE   A,#00CH,?LAB56
0118         ?LAB56:
0118 5011           JNC    ?ELSE24
011A E500    R      MOV    A,Temp
011C 642C           XRL    A,#02CH
011E 600B           JZ     ?ELSE24
                                           ; SOURCE LINE # 96 
0120 E500    R      MOV    A,RxCntr
0122 0500    R      INC    RxCntr
0124 2400    R      ADD    A,#gps_time
0126 F8             MOV    R0,A
0127 A600    R      MOV    @R0,Temp
0129 8033           SJMP   ?NXT54
012B         ?ELSE24:
                                           ; SOURCE LINE # 97 
012B E500    R      MOV    A,RxCntr
012D B40C2E         CJNE   A,#00CH,?NXT54
                                           ; SOURCE LINE # 99 
0130 0500    R      INC    commands
                                           ; SOURCE LINE # 100 
0132 750001  R      MOV    RxState,#001H
                                           ; SOURCE LINE # 101 
0135 E500    R      MOV    A,commands
0137 B40224         CJNE   A,#002H,?NXT54
013A 750016  R      MOV    state,#016H
                                           ; SOURCE LINE # 103 
013D 801F           SJMP   ?NXT53
013F         ?CASE28:
                                           ; SOURCE LINE # 105 
013F 0500    R      INC    RxCntr
                                           ; SOURCE LINE # 106 
0141 E500    R      MOV    A,RxCntr
0143 B42403         CJNE   A,#024H,?NXT64
                                           ; SOURCE LINE # 107 
0146 850000  R      MOV    vis_satelites,Temp
0149         ?NXT64:
                                           ; SOURCE LINE # 108 
0149 E500    R      MOV    A,RxCntr
014B B42510         CJNE   A,#025H,?NXT54
                                           ; SOURCE LINE # 110 
014E 850000  R      MOV    track_satelites,Temp
                                           ; SOURCE LINE # 111 
0151 0500    R      INC    commands
                                           ; SOURCE LINE # 112 
0153 E500    R      MOV    A,commands
0155 B40203         CJNE   A,#002H,?NXT66
0158 750016  R      MOV    state,#016H
015B         ?NXT66:
                                           ; SOURCE LINE # 113 
015B 750001  R      MOV    RxState,#001H
015E         ?NXT54:

015E         ?NXT53:
                                           ; SOURCE LINE # 119 
015E E500    R      MOV    A,state
0160 B41503         CJNE   A,#015H,?LAB61
0163 020000  R      LJMP   ?CASE32
0166         ?LAB61:
0166 5012           JNC    ?LAB60
0168 E500    R      MOV    A,state
016A 24EE           ADD    A,#0EEH
016C 7003           JNZ    $ + 5
016E 020000  R      LJMP   ?NXT67
0171 14             DEC    A
0172 603B           JZ     ?CASE30
0174 14             DEC    A
0175 6058           JZ     ?CASE31
0177 020000  R      LJMP   ?NXT67
017A         ?LAB60:
017A E500    R      MOV    A,state
017C 24EA           ADD    A,#0EAH
017E 601E           JZ     ?CASE33
0180 14             DEC    A
0181 6006           JZ     ?CASE34
0183 14             DEC    A
0184 6065           JZ     ?CASE35
0186 020000  R      LJMP   ?WHILE27
0189         ?CASE34:
                                           ; SOURCE LINE # 124 
0189 120000  R      LCALL  DelayOnems
                                           ; SOURCE LINE # 125 
018C 120000  R      LCALL  DelayOnems
                                           ; SOURCE LINE # 126 
018F 309404         JNB    SW,?ELSE30
                                           ; SOURCE LINE # 127 
0192 D200    R      SETB   button
0194 8002           SJMP   ?NXT68
0196         ?ELSE30:
                                           ; SOURCE LINE # 129 
0196 C200    R      CLR    button
0198         ?NXT68:
                                           ; SOURCE LINE # 130 
0198 750012  R      MOV    state,#012H
                                           ; SOURCE LINE # 131 
019B 020000  R      LJMP   ?WHILE27
019E         ?CASE33:
                                           ; SOURCE LINE # 133 
019E 120000  R      LCALL  TimeWindow
                                           ; SOURCE LINE # 134 
01A1 300005  R      JNB    button,?ELSE31
                                           ; SOURCE LINE # 135 
01A4 750013  R      MOV    state,#013H
01A7 8057           SJMP   ?NXT67
01A9         ?ELSE31:
                                           ; SOURCE LINE # 137 
01A9 750014  R      MOV    state,#014H
                                           ; SOURCE LINE # 138 
01AC 020000  R      LJMP   ?WHILE27
01AF         ?CASE30:
                                           ; SOURCE LINE # 140 
01AF 7900    R      MOV    R1,#gps_time+08H
01B1 B73313         CJNE   @R1,#033H,?ELSE32
01B4 7800    R      MOV    R0,#gps_time+09H
01B6 B6300E         CJNE   @R0,#030H,?ELSE32
01B9 7800    R      MOV    R0,#gps_time+0AH
01BB B63209         CJNE   @R0,#032H,?ELSE32
01BE 7800    R      MOV    R0,#gps_time+0BH
01C0 B63904         CJNE   @R0,#039H,?ELSE32
                                           ; SOURCE LINE # 141 
01C3 D200    R      SETB   A2
01C5 8002           SJMP   ?NXT70
01C7         ?ELSE32:
                                           ; SOURCE LINE # 143 
01C7 C200    R      CLR    A2
01C9         ?NXT70:
                                           ; SOURCE LINE # 144 
01C9 750012  R      MOV    state,#012H
                                           ; SOURCE LINE # 145 
01CC 020000  R      LJMP   ?WHILE27
01CF         ?CASE31:
                                           ; SOURCE LINE # 147 
01CF 7900    R      MOV    R1,#gps_time+09H
01D1 E7             MOV    A,@R1
01D2 20E00E         JB     ACC.0,?ELSE33
01D5 7800    R      MOV    R0,#gps_time+0AH
01D7 B63209         CJNE   @R0,#032H,?ELSE33
01DA 7800    R      MOV    R0,#gps_time+0BH
01DC B63904         CJNE   @R0,#039H,?ELSE33
                                           ; SOURCE LINE # 148 
01DF D200    R      SETB   A2
01E1 8002           SJMP   ?NXT71
01E3         ?ELSE33:
                                           ; SOURCE LINE # 150 
01E3 C200    R      CLR    A2
01E5         ?NXT71:
                                           ; SOURCE LINE # 151 
01E5 750012  R      MOV    state,#012H
                                           ; SOURCE LINE # 152 
01E8 020000  R      LJMP   ?WHILE27
01EB         ?CASE35:
                                           ; SOURCE LINE # 154 
01EB D291           SETB   pps
                                           ; SOURCE LINE # 155 
01ED D291           SETB   pps
                                           ; SOURCE LINE # 156 
01EF C291           CLR    pps
                                           ; SOURCE LINE # 157 
01F1 750012  R      MOV    state,#012H
                                           ; SOURCE LINE # 158 
01F4 020000  R      LJMP   ?WHILE27
01F7         ?CASE32:
                                           ; SOURCE LINE # 160 
01F7 D290           SETB   pulse_out
                                           ; SOURCE LINE # 161 
01F9 D290           SETB   pulse_out
                                           ; SOURCE LINE # 162 
01FB C290           CLR    pulse_out
                                           ; SOURCE LINE # 163 
01FD 750012  R      MOV    state,#012H
0200         ?NXT67:
                                           ; SOURCE LINE # 164 
0200 020000  R      LJMP   ?WHILE27

            ; FUNCTION main (END)

            ; FUNCTION serial_isr (BEGIN)
                                           ; SOURCE LINE # 174 
0000 C0D0           PUSH   PSW
                                           ; SOURCE LINE # 170 
0002 309808         JNB    RI,?NXT75
                                           ; SOURCE LINE # 172 
0005 750001  R      MOV    rxFlag,#001H
                                           ; SOURCE LINE # 173 
0008 C298           CLR    RI
                                           ; SOURCE LINE # 174 
000A 859900  R      MOV    Temp,SBUF
000D         ?NXT75:
000D D0D0           POP    PSW
000F 32             RETI   

            ; FUNCTION serial_isr (END)

            ; FUNCTION PCATimers (BEGIN)
                                           ; SOURCE LINE # 192 
0000 C0E0           PUSH   ACC
0002 C0D0           PUSH   PSW
0004 75D008         MOV    PSW,#008H
                                           ; SOURCE LINE # 179 
0007 30D812         JNB    CCF0,?NXT79
                                           ; SOURCE LINE # 181 
000A C2D8           CLR    CCF0
                                           ; SOURCE LINE # 182 
000C E4             CLR    A
000D F500    R      MOV    commands,A
                                           ; SOURCE LINE # 183 
000F A200    R      MOV    C,A2
0011 9290           MOV    pulse_out,C
                                           ; SOURCE LINE # 184 
0013 A200    R      MOV    C,A2
0015 9290           MOV    pulse_out,C
                                           ; SOURCE LINE # 185 
0017 C290           CLR    pulse_out
                                           ; SOURCE LINE # 186 
0019 750018  R      MOV    state,#018H
001C         ?NXT79:
                                           ; SOURCE LINE # 189 
001C 30D905         JNB    CCF1,?NXT81
                                           ; SOURCE LINE # 191 
001F C2D9           CLR    CCF1
                                           ; SOURCE LINE # 192 
0021 750017  R      MOV    state,#017H
0024         ?NXT81:
0024 D0D0           POP    PSW
0026 D0E0           POP    ACC
0028 32             RETI   

            ; FUNCTION PCATimers (END)

C51 COMPILER V6.11.3B,  MAIN                      03/02/111  13:57:40  PAGE  3

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====

gps_time . . . . . . . . . . . . . . .  PUBLIC  IDATA   ARRAY   0000H   13   
track_satelites. . . . . . . . . . . .  PUBLIC  DATA    BASE    0000H   1    
vis_satelites. . . . . . . . . . . . .  PUBLIC  DATA    BASE    0001H   1    
Temp . . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0002H   1    
rxFlag . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0003H   1    
RxState. . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0004H   1    
state. . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0005H   1    
RxCntr . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0006H   1    
commands . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0007H   1    
q. . . . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0008H   1    
A2 . . . . . . . . . . . . . . . . . .  PUBLIC  DATA    BIT     0000H   1    
button . . . . . . . . . . . . . . . .  PUBLIC  DATA    BIT     0001H   1    
GMT_Offset . . . . . . . . . . . . . .  PUBLIC  DATA    ARRAY   0009H   11   
Short_Position . . . . . . . . . . . .  PUBLIC  DATA    ARRAY   0014H   9    
ASCII_Position . . . . . . . . . . . .  PUBLIC  DATA    ARRAY   001DH   9    
Combined_Position. . . . . . . . . . .  PUBLIC  DATA    ARRAY   0026H   21   
LcdBusy. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
WriteControl . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  var?040. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  var?040. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
WriteData. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  var?041. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  var?041. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
InitDisp . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
DispStr. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  s?042. . . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
  s?042. . . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
LCDCursor. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  row?043. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  col?044. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0001H   1    
  row?043. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  col?044. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0001H   1    
Delay500us . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
DelayOnems . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LCDClear . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
Getc . . . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
c?048. . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0000H   1    
SendChar . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  ch?049 . . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  ch?049 . . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
SendStr. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  cmd?050. . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
  cmd?050. . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
TimeWindow . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
main . . . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
dly?053. . . . . . . . . . . . . . . .  PUBLIC  DATA    U_INT  0000H   2    
serial_isr . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
PCATimers. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
C51 COMPILER V6.11.3B,  MAIN                      03/02/111  13:57:40  PAGE  4



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1088    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     59       3
   IDATA SIZE       =     13    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.

C51 COMPILATION COMPLETE.  0 WARNING,  0 ERROR
